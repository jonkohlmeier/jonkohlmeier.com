{"version":3,"file":"component---src-templates-blog-post-js-c6e40fdb2626b3641eb5.js","mappings":"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","sources":["webpack://jonkohlmeier/./src/components/bio.js","webpack://jonkohlmeier/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          gatsbyImageData(\n            width: 64\n            height: 64\n            quality: 95\n            placeholder: BLURRED\n            layout: FIXED\n          )\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `);\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author;\n  const social = data.site.siteMetadata?.social;\n\n  const avatar = getImage(data?.avatar);\n\n  return (\n    <div className=\"bio\">\n      {avatar && (\n        <GatsbyImage\n          image={avatar}\n          alt={author?.name || `Author avatar`}\n          className=\"bio-avatar\"\n          imgStyle={{ borderRadius: `50%` }}\n        />\n      )}\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Bio;\n","import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\n\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark;\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  const { previous, next } = data;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p className=\"post-meta\">\n            <time dateTime={post.frontmatter.dateISO}>\n              {post.frontmatter.date}\n            </time>\n          </p>\n          {post.frontmatter.headerImage && (\n            <div className=\"headerImage\">\n              <GatsbyImage\n                image={getImage(post.frontmatter.headerImage)}\n                alt={post.frontmatter.title}\n              />\n            </div>\n          )}\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <Bio />\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        dateISO: date\n        description\n        headerImage {\n          childImageSharp {\n            gatsbyImageData(\n              layout: CONSTRAINED\n              width: 1400\n              quality: 90\n              placeholder: BLURRED\n            )\n          }\n        }\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n\nexport const Head = ({ data, location }) => {\n  const post = data.markdownRemark;\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n      pathname={location.pathname}\n      image={\n        post.frontmatter.headerImage?.childImageSharp?.gatsbyImageData?.images\n          ?.fallback?.src\n      }\n    >\n      <meta\n        property=\"article:published_time\"\n        content={post.frontmatter.dateISO}\n      />\n    </Seo>\n  );\n};\n"],"names":["Bio","_data$site$siteMetada","_data$site$siteMetada2","data","useStaticQuery","author","site","siteMetadata","avatar","social","getImage","React","className","GatsbyImage","image","alt","name","imgStyle","borderRadius","summary","_ref","location","post","markdownRemark","siteTitle","title","previous","next","Layout","itemScope","itemType","itemProp","frontmatter","dateTime","dateISO","date","headerImage","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel","Head","_ref2","_post$frontmatter$hea","_post$frontmatter$hea2","_post$frontmatter$hea3","_post$frontmatter$hea4","_post$frontmatter$hea5","Seo","description","excerpt","pathname","childImageSharp","gatsbyImageData","images","fallback","src","property","content"],"sourceRoot":""}